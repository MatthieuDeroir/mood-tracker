// src/db/migrate.ts - Script de migration Drizzle
import { migrate } from 'drizzle-orm/postgres-js/migrator';
import { db, testConnection, ensureDefaultUser } from './database.ts';

async function runMigration() {
    try {
        console.log('üîß D√©marrage de la migration de la base de donn√©es...');

        // Tester la connexion √† la base de donn√©es
        await testConnection();

        // Ex√©cuter les migrations
        console.log('üì¶ Ex√©cution des migrations...');
        await migrate(db, { migrationsFolder: './drizzle' });
        console.log('‚úÖ Migrations termin√©es avec succ√®s');

        // Cr√©er un utilisateur par d√©faut
        await ensureDefaultUser();

        // R√©cup√©rer des statistiques de la base de donn√©es
        const userCount = await db.query.users.count();
        const moodCount = await db.query.moodEntries.count();

        console.log(`üìä Statistiques de la base de donn√©es:`);
        console.log(`   - Utilisateurs: ${userCount}`);
        console.log(`   - Entr√©es d'humeur: ${moodCount}`);

        // Afficher la version PostgreSQL
        const versionResult = await db.execute(sql`SELECT version()`);
        console.log(`üì¶ Version PostgreSQL: ${versionResult.rows[0].version}`);

        console.log('‚úÖ Migration termin√©e avec succ√®s!');

    } catch (error) {
        console.error('‚ùå √âchec de la migration:', error);
        throw error;
    }
}

// Fonction pour r√©initialiser la base de donn√©es
async function resetDatabase() {
    try {
        console.log('üîÑ R√©initialisation de la base de donn√©es...');

        // Supprimer toutes les entr√©es
        await db.delete(schema.moodEntries);
        await db.delete(schema.users);

        console.log('‚úÖ R√©initialisation termin√©e!');
    } catch (error) {
        console.error('‚ùå √âchec de la r√©initialisation de la base de donn√©es:', error);
        throw error;
    }
}

// Fonction pour peupler la base de donn√©es avec des donn√©es de test
async function seedDatabase() {
    try {
        console.log('üå± Peuplement de la base de donn√©es...');

        // Cr√©er l'utilisateur par d√©faut
        const user = await ensureDefaultUser();

        // Cr√©er quelques humeurs de test
        const testMoods = [
            { mood: 7, note: 'Bonne journ√©e au travail', tags: ['work', 'productive'] },
            { mood: 5, note: 'Journ√©e normale', tags: ['routine'] },
            { mood: 8, note: 'Soir√©e avec des amis', tags: ['friends', 'social'] },
            { mood: 6, note: 'Exercice matinal', tags: ['health', 'exercise'] },
            { mood: 9, note: 'Excellent weekend !', tags: ['weekend', 'family'] },
        ];

        for (const moodData of testMoods) {
            // Calculer un timestamp al√©atoire dans les 7 derniers jours
            const randomDate = new Date();
            randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 7));

            await db.insert(schema.moodEntries).values({
                userId: user.id,
                mood: moodData.mood,
                note: moodData.note,
                tags: moodData.tags,
                timestamp: randomDate
            });
        }

        console.log(`‚úÖ Base de donn√©es peupl√©e avec ${testMoods.length} humeurs de test`);

    } catch (error) {
        console.error('‚ùå √âchec du peuplement de la base de donn√©es:', error);
        throw error;
    }
}

// Interface CLI
if (import.meta.main) {
    const command = Deno.args[0] || 'migrate';

    switch (command) {
        case 'migrate':
            await runMigration();
            break;
        case 'reset':
            await resetDatabase();
            break;
        case 'seed':
            await seedDatabase();
            break;
        case 'reset-and-seed':
            await resetDatabase();
            await seedDatabase();
            break;
        default:
            console.log('Usage: deno run --allow-net --allow-read --allow-env src/db/migrate.ts [migrate|reset|seed|reset-and-seed]');
            break;
    }
}